//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sbWinFormUploader.smartblindsws {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://smartblinds.eastus.cloudapp.azure.com/", ConfigurationName="smartblindsws.SmartBlindsWebServiceSoap")]
    public interface SmartBlindsWebServiceSoap {
        
        // CODEGEN: Generating message contract since the wrapper name (TestHelloWorldd) of message TestHelloWorldd does not match the default value (HelloWorld)
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/TestHelloWorldd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        sbWinFormUploader.smartblindsws.TestHelloWorldd1 HelloWorld(sbWinFormUploader.smartblindsws.TestHelloWorldd request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/TestHelloWorldd", ReplyAction="*")]
        System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.TestHelloWorldd1> HelloWorldAsync(sbWinFormUploader.smartblindsws.TestHelloWorldd request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/GetCurrentUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetCurrentUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/GetCurrentUser", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetCurrentUserAsync();
        
        // CODEGEN: Parameter 'f' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/UploadFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        sbWinFormUploader.smartblindsws.UploadFileResponse UploadFile(sbWinFormUploader.smartblindsws.UploadFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/UploadFile", ReplyAction="*")]
        System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.UploadFileResponse> UploadFileAsync(sbWinFormUploader.smartblindsws.UploadFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/SetCurrentUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SetCurrentUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/SetCurrentUser", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SetCurrentUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/ReturnCurrentUserSettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        sbWinFormUploader.smartblindsws.sbUsers ReturnCurrentUserSettings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/ReturnCurrentUserSettings", ReplyAction="*")]
        System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.sbUsers> ReturnCurrentUserSettingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/GetBlindSettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        sbWinFormUploader.smartblindsws.BlindSettings GetBlindSettings(int SysID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/GetBlindSettings", ReplyAction="*")]
        System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.BlindSettings> GetBlindSettingsAsync(int SysID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/SetBlindSettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        sbWinFormUploader.smartblindsws.BlindSettings SetBlindSettings(int SysID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/SetBlindSettings", ReplyAction="*")]
        System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.BlindSettings> SetBlindSettingsAsync(int SysID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/GetBlindsSettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlElement GetBlindsSettings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/GetBlindsSettings", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlElement> GetBlindsSettingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/SetBlindsSettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetBlindsSettings(string h, string v, int f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/SetBlindsSettings", ReplyAction="*")]
        System.Threading.Tasks.Task SetBlindsSettingsAsync(string h, string v, int f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/GetXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetXML();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/GetXML", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetXMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/GetXMLdetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlElement GetXMLdetail();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/GetXMLdetail", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlElement> GetXMLdetailAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/LogEntry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LogEntry(int func, string val);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/LogEntry", ReplyAction="*")]
        System.Threading.Tasks.Task LogEntryAsync(int func, string val);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/LogAllEntry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LogAllEntry(int func, string tempVal, string proxVal, string gasLog, string sbHorxLog, string sbVertLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://smartblinds.eastus.cloudapp.azure.com/LogAllEntry", ReplyAction="*")]
        System.Threading.Tasks.Task LogAllEntryAsync(int func, string tempVal, string proxVal, string gasLog, string sbHorxLog, string sbVertLog);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TestHelloWorldd", WrapperNamespace="http://smartblinds.eastus.cloudapp.azure.com/", IsWrapped=true)]
    public partial class TestHelloWorldd {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://smartblinds.eastus.cloudapp.azure.com/", Order=0)]
        public string name;
        
        public TestHelloWorldd() {
        }
        
        public TestHelloWorldd(string name) {
            this.name = name;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TestHelloWorlddResponse", WrapperNamespace="http://smartblinds.eastus.cloudapp.azure.com/", IsWrapped=true)]
    public partial class TestHelloWorldd1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://smartblinds.eastus.cloudapp.azure.com/", Order=0)]
        public string TestHelloWorlddResult;
        
        public TestHelloWorldd1() {
        }
        
        public TestHelloWorldd1(string TestHelloWorlddResult) {
            this.TestHelloWorlddResult = TestHelloWorlddResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFile", WrapperNamespace="http://smartblinds.eastus.cloudapp.azure.com/", IsWrapped=true)]
    public partial class UploadFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://smartblinds.eastus.cloudapp.azure.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] f;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://smartblinds.eastus.cloudapp.azure.com/", Order=1)]
        public string fileName;
        
        public UploadFileRequest() {
        }
        
        public UploadFileRequest(byte[] f, string fileName) {
            this.f = f;
            this.fileName = fileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileResponse", WrapperNamespace="http://smartblinds.eastus.cloudapp.azure.com/", IsWrapped=true)]
    public partial class UploadFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://smartblinds.eastus.cloudapp.azure.com/", Order=0)]
        public string UploadFileResult;
        
        public UploadFileResponse() {
        }
        
        public UploadFileResponse(string UploadFileResult) {
            this.UploadFileResult = UploadFileResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://smartblinds.eastus.cloudapp.azure.com/")]
    public partial class sbUsers : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int sysIDField;
        
        private int profileSysIDField;
        
        private string fnameField;
        
        private string lnameField;
        
        private string phoneField;
        
        private string emailField;
        
        private int activeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int SysID {
            get {
                return this.sysIDField;
            }
            set {
                this.sysIDField = value;
                this.RaisePropertyChanged("SysID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int ProfileSysID {
            get {
                return this.profileSysIDField;
            }
            set {
                this.profileSysIDField = value;
                this.RaisePropertyChanged("ProfileSysID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Fname {
            get {
                return this.fnameField;
            }
            set {
                this.fnameField = value;
                this.RaisePropertyChanged("Fname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Lname {
            get {
                return this.lnameField;
            }
            set {
                this.lnameField = value;
                this.RaisePropertyChanged("Lname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
                this.RaisePropertyChanged("Phone");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("Email");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int Active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
                this.RaisePropertyChanged("Active");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://smartblinds.eastus.cloudapp.azure.com/")]
    public partial class BlindSettings : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int sysIDField;
        
        private string nameField;
        
        private string sbHorizontalField;
        
        private string sbVerticalField;
        
        private string notesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int SysID {
            get {
                return this.sysIDField;
            }
            set {
                this.sysIDField = value;
                this.RaisePropertyChanged("SysID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string SbHorizontal {
            get {
                return this.sbHorizontalField;
            }
            set {
                this.sbHorizontalField = value;
                this.RaisePropertyChanged("SbHorizontal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string SbVertical {
            get {
                return this.sbVerticalField;
            }
            set {
                this.sbVerticalField = value;
                this.RaisePropertyChanged("SbVertical");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
                this.RaisePropertyChanged("Notes");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SmartBlindsWebServiceSoapChannel : sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SmartBlindsWebServiceSoapClient : System.ServiceModel.ClientBase<sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap>, sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap {
        
        public SmartBlindsWebServiceSoapClient() {
        }
        
        public SmartBlindsWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SmartBlindsWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartBlindsWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartBlindsWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        sbWinFormUploader.smartblindsws.TestHelloWorldd1 sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap.HelloWorld(sbWinFormUploader.smartblindsws.TestHelloWorldd request) {
            return base.Channel.HelloWorld(request);
        }
        
        public string HelloWorld(string name) {
            sbWinFormUploader.smartblindsws.TestHelloWorldd inValue = new sbWinFormUploader.smartblindsws.TestHelloWorldd();
            inValue.name = name;
            sbWinFormUploader.smartblindsws.TestHelloWorldd1 retVal = ((sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap)(this)).HelloWorld(inValue);
            return retVal.TestHelloWorlddResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.TestHelloWorldd1> sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap.HelloWorldAsync(sbWinFormUploader.smartblindsws.TestHelloWorldd request) {
            return base.Channel.HelloWorldAsync(request);
        }
        
        public System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.TestHelloWorldd1> HelloWorldAsync(string name) {
            sbWinFormUploader.smartblindsws.TestHelloWorldd inValue = new sbWinFormUploader.smartblindsws.TestHelloWorldd();
            inValue.name = name;
            return ((sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap)(this)).HelloWorldAsync(inValue);
        }
        
        public string GetCurrentUser() {
            return base.Channel.GetCurrentUser();
        }
        
        public System.Threading.Tasks.Task<string> GetCurrentUserAsync() {
            return base.Channel.GetCurrentUserAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        sbWinFormUploader.smartblindsws.UploadFileResponse sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap.UploadFile(sbWinFormUploader.smartblindsws.UploadFileRequest request) {
            return base.Channel.UploadFile(request);
        }
        
        public string UploadFile(byte[] f, string fileName) {
            sbWinFormUploader.smartblindsws.UploadFileRequest inValue = new sbWinFormUploader.smartblindsws.UploadFileRequest();
            inValue.f = f;
            inValue.fileName = fileName;
            sbWinFormUploader.smartblindsws.UploadFileResponse retVal = ((sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap)(this)).UploadFile(inValue);
            return retVal.UploadFileResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.UploadFileResponse> sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap.UploadFileAsync(sbWinFormUploader.smartblindsws.UploadFileRequest request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.UploadFileResponse> UploadFileAsync(byte[] f, string fileName) {
            sbWinFormUploader.smartblindsws.UploadFileRequest inValue = new sbWinFormUploader.smartblindsws.UploadFileRequest();
            inValue.f = f;
            inValue.fileName = fileName;
            return ((sbWinFormUploader.smartblindsws.SmartBlindsWebServiceSoap)(this)).UploadFileAsync(inValue);
        }
        
        public string SetCurrentUser() {
            return base.Channel.SetCurrentUser();
        }
        
        public System.Threading.Tasks.Task<string> SetCurrentUserAsync() {
            return base.Channel.SetCurrentUserAsync();
        }
        
        public sbWinFormUploader.smartblindsws.sbUsers ReturnCurrentUserSettings() {
            return base.Channel.ReturnCurrentUserSettings();
        }
        
        public System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.sbUsers> ReturnCurrentUserSettingsAsync() {
            return base.Channel.ReturnCurrentUserSettingsAsync();
        }
        
        public sbWinFormUploader.smartblindsws.BlindSettings GetBlindSettings(int SysID) {
            return base.Channel.GetBlindSettings(SysID);
        }
        
        public System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.BlindSettings> GetBlindSettingsAsync(int SysID) {
            return base.Channel.GetBlindSettingsAsync(SysID);
        }
        
        public sbWinFormUploader.smartblindsws.BlindSettings SetBlindSettings(int SysID) {
            return base.Channel.SetBlindSettings(SysID);
        }
        
        public System.Threading.Tasks.Task<sbWinFormUploader.smartblindsws.BlindSettings> SetBlindSettingsAsync(int SysID) {
            return base.Channel.SetBlindSettingsAsync(SysID);
        }
        
        public System.Xml.XmlElement GetBlindsSettings() {
            return base.Channel.GetBlindsSettings();
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> GetBlindsSettingsAsync() {
            return base.Channel.GetBlindsSettingsAsync();
        }
        
        public void SetBlindsSettings(string h, string v, int f) {
            base.Channel.SetBlindsSettings(h, v, f);
        }
        
        public System.Threading.Tasks.Task SetBlindsSettingsAsync(string h, string v, int f) {
            return base.Channel.SetBlindsSettingsAsync(h, v, f);
        }
        
        public string GetXML() {
            return base.Channel.GetXML();
        }
        
        public System.Threading.Tasks.Task<string> GetXMLAsync() {
            return base.Channel.GetXMLAsync();
        }
        
        public System.Xml.XmlElement GetXMLdetail() {
            return base.Channel.GetXMLdetail();
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> GetXMLdetailAsync() {
            return base.Channel.GetXMLdetailAsync();
        }
        
        public void LogEntry(int func, string val) {
            base.Channel.LogEntry(func, val);
        }
        
        public System.Threading.Tasks.Task LogEntryAsync(int func, string val) {
            return base.Channel.LogEntryAsync(func, val);
        }
        
        public void LogAllEntry(int func, string tempVal, string proxVal, string gasLog, string sbHorxLog, string sbVertLog) {
            base.Channel.LogAllEntry(func, tempVal, proxVal, gasLog, sbHorxLog, sbVertLog);
        }
        
        public System.Threading.Tasks.Task LogAllEntryAsync(int func, string tempVal, string proxVal, string gasLog, string sbHorxLog, string sbVertLog) {
            return base.Channel.LogAllEntryAsync(func, tempVal, proxVal, gasLog, sbHorxLog, sbVertLog);
        }
    }
}
