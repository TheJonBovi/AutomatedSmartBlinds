//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartBlindsWebApp.sbServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlindSettings", Namespace="http://localhost")]
    [System.SerializableAttribute()]
    public partial class BlindSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SbHorizontalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SbVerticalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SysIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SbHorizontal {
            get {
                return this.SbHorizontalField;
            }
            set {
                if ((object.ReferenceEquals(this.SbHorizontalField, value) != true)) {
                    this.SbHorizontalField = value;
                    this.RaisePropertyChanged("SbHorizontal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SbVertical {
            get {
                return this.SbVerticalField;
            }
            set {
                if ((object.ReferenceEquals(this.SbVerticalField, value) != true)) {
                    this.SbVerticalField = value;
                    this.RaisePropertyChanged("SbVertical");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SysID {
            get {
                return this.SysIDField;
            }
            set {
                if ((this.SysIDField.Equals(value) != true)) {
                    this.SysIDField = value;
                    this.RaisePropertyChanged("SysID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="sbServices.IsbServices")]
    public interface IsbServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsbServices/GetBlindSettings", ReplyAction="http://tempuri.org/IsbServices/GetBlindSettingsResponse")]
        SmartBlindsWebApp.sbServices.BlindSettings GetBlindSettings(int SysID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsbServices/GetBlindSettings", ReplyAction="http://tempuri.org/IsbServices/GetBlindSettingsResponse")]
        System.Threading.Tasks.Task<SmartBlindsWebApp.sbServices.BlindSettings> GetBlindSettingsAsync(int SysID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsbServices/SetBlindSettings", ReplyAction="http://tempuri.org/IsbServices/SetBlindSettingsResponse")]
        void SetBlindSettings(SmartBlindsWebApp.sbServices.BlindSettings Smartblinds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsbServices/SetBlindSettings", ReplyAction="http://tempuri.org/IsbServices/SetBlindSettingsResponse")]
        System.Threading.Tasks.Task SetBlindSettingsAsync(SmartBlindsWebApp.sbServices.BlindSettings Smartblinds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsbServices/DoWork", ReplyAction="http://tempuri.org/IsbServices/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsbServices/DoWork", ReplyAction="http://tempuri.org/IsbServices/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IsbServicesChannel : SmartBlindsWebApp.sbServices.IsbServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsbServicesClient : System.ServiceModel.ClientBase<SmartBlindsWebApp.sbServices.IsbServices>, SmartBlindsWebApp.sbServices.IsbServices {
        
        public IsbServicesClient() {
        }
        
        public IsbServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IsbServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IsbServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IsbServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SmartBlindsWebApp.sbServices.BlindSettings GetBlindSettings(int SysID) {
            return base.Channel.GetBlindSettings(SysID);
        }
        
        public System.Threading.Tasks.Task<SmartBlindsWebApp.sbServices.BlindSettings> GetBlindSettingsAsync(int SysID) {
            return base.Channel.GetBlindSettingsAsync(SysID);
        }
        
        public void SetBlindSettings(SmartBlindsWebApp.sbServices.BlindSettings Smartblinds) {
            base.Channel.SetBlindSettings(Smartblinds);
        }
        
        public System.Threading.Tasks.Task SetBlindSettingsAsync(SmartBlindsWebApp.sbServices.BlindSettings Smartblinds) {
            return base.Channel.SetBlindSettingsAsync(Smartblinds);
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
    }
}
